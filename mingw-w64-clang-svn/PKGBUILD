# Maintainer: Martell Malone <MartellMalone@gmail.com>
# Contributor: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Mateusz Mikula <mati865@gmail.com>

# Martell's notes
# libc++ and libc++abi are built statically only becuase shared will depend
# on libstdc++ atm which would make a big mess for us
# We could either use libc++ for this or use a static libstdc++
# I would like to avoid the latter.

# I may add a bootstrap option for libc++ to build libc++ soon
# Maybe having a seperate PKGBUILD for it would be helpful for this also

# choose the compiler that will be used to build clang
_compiler=gcc   # clang, gcc

_realname=clang
pkgbase=mingw-w64-${_realname}-svn
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-svn"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-analyzer-svn"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-tools-extra-svn"
        #  "${MINGW_PACKAGE_PREFIX}-compiler-rt-svn"
        #  "${MINGW_PACKAGE_PREFIX}-libc++abi-svn"
        #  "${MINGW_PACKAGE_PREFIX}-libc++-svn"
        #  "${MINGW_PACKAGE_PREFIX}-libunwind-svn"
        #  "${MINGW_PACKAGE_PREFIX}-lld-svn"
         "${MINGW_PACKAGE_PREFIX}-llvm-svn"
        #  "${MINGW_PACKAGE_PREFIX}-lldb-svn"
        )
pkgver=66254.4fd7248cd9
pkgrel=1
pkgdesc="C language family frontend for LLVM (svn) (mingw-w64)"
arch=('any')
url="http://llvm.org"
license=("custom:University of Illinois/NCSA Open Source License")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-gcc"
             "${MINGW_PACKAGE_PREFIX}-pkg-config"
             "${MINGW_PACKAGE_PREFIX}-python3-sphinx"
             "${MINGW_PACKAGE_PREFIX}-python2"
             "git")
depends=("${MINGW_PACKAGE_PREFIX}-gcc")
#options=('debug' '!strip')
source=("llvm"::"git+http://llvm.org/git/llvm.git"
        "lld"::"git+http://llvm.org/git/lld.git"
        "clang"::"git+http://llvm.org/git/clang.git"
        "clang-tools-extra"::"git+http://llvm.org/git/clang-tools-extra.git"
        "compiler-rt"::"git+http://llvm.org/git/compiler-rt.git"
        "testsuite"::"git+http://llvm.org/git/test-suite.git"
        "libcxxabi"::"git+http://llvm.org/git/libcxxabi.git"
        "libcxx"::"git+http://llvm.org/git/libcxx.git"
        "libunwind"::"git+http://llvm.org/git/libunwind.git"
        "lldb"::"git+http://llvm.org/git/lldb.git"
        "0001-genlib-named-as-llvm-dlltool.patch"
        "0002-mingw-w64-use-MSVC-style-ByteAlignment.patch"
        "0003-Fix-GetHostTriple-for-mingw-w64-in-msys.patch"
        "0004-Globally-provide-DESTDIR-for-all-platforms.patch"
        "0005-not-install-msvc-files.patch"
        "0006-llvm-config-don-t-use-versioned-shared-lib-on-win32.patch"
        "0103-mingw-w64-enable-support-for-__declspec-selectany.patch"
        "0104-mingw-w64-support-static-builds-of-libc.patch"
        "0105-mingw-enable-static-libclang.patch"
        "0106-fix-libclang-name-for-mingw.patch"
        "0107-dont-create-cl-mingw.patch"
        "0108-don-t-use-GCC-headers.patch"
        "0109-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch"
        "0110-enable-support-for-float128.patch"
        "0111-link-pthread-unless-using-libc.patch"
        "0201-mingw-w64-__udivdi3-mangle-hack.patch"
        "0202-mingw-fixes-for-compiler-rt.patch"
        "0301-COFF-gnu-driver-support.patch"
        "0302-add-install-target-for-the-lld-tool.patch"
        "0303-Fix-LLVM_LINK_LLVM_DYLIB-build.patch"
        "0401-mingw-w64-hack-and-slash-fixes-for-libc.patch"
        "0402-fix-compilation-with-gcc.patch"
        "0501-lldb-mingw-fixes.patch"
        "0502-hack-to-use-64-bit-time-for-mingw.patch"
        "0601-libunwind-add-support-for-mingw-w64.patch")

# Some patch notes :)
#0001-0099 -> llvm
#0101-0199 -> clang
#0201-0299 -> rt
#0301-0399 -> lld
#0401-0499 -> c++
#0501-0599 -> lldb
#0601-0699 -> libunwind

sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '3f55d2114805110e370fab6630763c359d83b07c356f61b86afc32feb7cf7514'
            '78b6951956360a8e05fdc7020bc7e1996da75b499022f9213465070fc238529c'
            'aceffb61d57c7c01bc2d9d5461f961df26cffdffaaabb8dda9f219acfe59c77a'
            'bccdb99553424121927b3f82086efb2adeee230f18944504ddd93d2d72371d5c'
            'c840f4e2286385c4ab3503c02976fd2459516fdc05e44f702d648afaaaebd97f'
            'c541d738a2bfffbe41923a593e9d9be2836120eb3aca01f886502fcb4f3f9314'
            '31e0f242f4463cadc1b867a87b38e4c2f689e70fdd6d64a44dcc3784f352b20f'
            'ba703d3d0f100d02ba01501319e6ec29565a199176fb20d11f89fa31b479df5f'
            'b00b3e2395d9262c999c6865da59837f0712454803e0d4e776181267df89f083'
            '0c570da0d1357cfef276da685b67118d48a6a6f5a0fc4e281c2925c10f8be9ca'
            'd929ef7c4c18c65f7a48156ff3ca38453334822008f2a5f57dd3f1d7c61b6723'
            'e4eb950f05eaf0fc30b8b8cb0a6ec02a2a60a13ae7e624aa992bb64531c6bf45'
            'b03cfc7ebbbfb847e88ae3569d9dcafb01f179b06f1312de29fbd5b7cf906617'
            'bfd38b1299180d8c4a3b8479c4ba15fc30219c83a5994ad6adcdf2c338af4520'
            'e9cf6bd5a86fb1922f5dd358d3d79ad42081e19cca72fdbbc06d8b300a26672d'
            '7abd9894abe9d28da975fadbad27478c308ed1455a5130091ad0ffd0351bfa52'
            '64c394e09cf11addc3be514e2b0e73e27492bdfddb38fb7aded3547c85dbcada'
            'fb1ef06b26e88d37d52c3e0b3b261089e92bb7c08231ec8fa234465fdbdab308'
            'c19a3e49f692eba9143bb67c39a9e6df33fa604d85b0b7834d99cdd58a28d23a'
            '852d55907b469739fca96b043e41c596824ad9d933268ce65a82100b975e91fb'
            '0f2cf89298303911a20e9cee7208ed418d91cf700af611a142dc735c708e1435'
            'ffbce44f0787dd3defa708f9637353856d70d4b0b888121dd600c6b269b167e1'
            'd9b46363c0db63316bdaa29580c446bfe5bc7b43eb8d00f894b72415066da53e'
            '461c75905768ce9ed14db48e6c959695f8a61c58c60486c2671b6d4d10923bad'
            '0371289d17563a2f29dd7041349e7fe24ed5f217c548c8bff93b47c5b5df2d20'
            '4be9205a90b3ed2d23b8e84cac36697c5a85026b6ab3193061fbb0b3915d76c9'
            '0a5529a5e9871ec5252c3853f1fdda69253c1a7505837e9c45ae14bcb76a8660')

pkgver_internal() {
  if [ ! -d "$1" ]; then
    plain "No such directory $1"
    exit 1
  fi
  pushd "$1" > /dev/null 2>&1
  printf "%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
  popd > /dev/null 2>&1
}

pkgver() {
  pkgver_internal "${srcdir}"/llvm/tools/clang
}

prepare() {
  cd "${srcdir}"/llvm
  gitam_mkpkg "${srcdir}"/0001-genlib-named-as-llvm-dlltool.patch
  gitam_mkpkg "${srcdir}"/0002-mingw-w64-use-MSVC-style-ByteAlignment.patch
  gitam_mkpkg "${srcdir}"/0003-Fix-GetHostTriple-for-mingw-w64-in-msys.patch
  gitam_mkpkg "${srcdir}"/0004-Globally-provide-DESTDIR-for-all-platforms.patch
  gitam_mkpkg "${srcdir}"/0005-not-install-msvc-files.patch
  # FIXME:
  # Wrong libs for shared linkage, probably https://github.com/llvm-mirror/llvm/commit/23d0163e617322d0a2bb815f9443c8c94fd920c3
  gitam_mkpkg "${srcdir}"/0006-llvm-config-don-t-use-versioned-shared-lib-on-win32.patch

  # # Fix docs installation directory
  # sed -i 's:$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
  #   Makefile.config.in

  # # Fix definition of LLVM_CMAKE_DIR in LLVMConfig.cmake
  # sed -i '/@LLVM_CONFIG_CMAKE_DIR@/s:$(PROJ_cmake):$(PROJ_prefix)/share/llvm/cmake:' \
  #   cmake/modules/Makefile

  cd "${srcdir}"/compiler-rt

  cd "${srcdir}"/lld

  cd "${srcdir}"/libcxx
  # gitam_mkpkg "${srcdir}"/0041-libcxx-add-support-for-mingw-w64.patch

  cd "${srcdir}"/clang
  gitam_mkpkg "${srcdir}"/0103-mingw-w64-enable-support-for-__declspec-selectany.patch
  gitam_mkpkg "${srcdir}"/0105-mingw-enable-static-libclang.patch
  gitam_mkpkg "${srcdir}"/0106-fix-libclang-name-for-mingw.patch
  gitam_mkpkg "${srcdir}"/0107-dont-create-cl-mingw.patch
  gitam_mkpkg "${srcdir}"/0108-don-t-use-GCC-headers.patch
  gitam_mkpkg "${srcdir}"/0109-Set-the-x86-arch-name-to-i686-for-mingw-w64.patch
  gitam_mkpkg "${srcdir}"/0111-link-pthread-unless-using-libc.patch

  cd "${srcdir}"/llvm

  # At the present, clang must reside inside the LLVM source code tree to build
  # See http://llvm.org/bugs/show_bug.cgi?id=4840
  rm -rf tools/clang tools/clang/tools/extra tools/lld tools/lldb projects/compiler-rt projects/libcxx \
        projects/libcxxabi projects/libunwind projects/test-suite | true
  mv "${srcdir}/clang"             tools/clang
  mv "${srcdir}/clang-tools-extra" tools/clang/tools/extra
  # mv "${srcdir}/lld"               tools/lld
  # mv "${srcdir}/lldb"              tools/lldb
  # mv "${srcdir}/compiler-rt"       projects/compiler-rt
  # mv "${srcdir}/libcxxabi"         projects/libcxxabi
  # mv "${srcdir}/libcxx"            projects/libcxx
  # mv "${srcdir}/libunwind"         projects/libunwind
  # mv "${srcdir}/testsuite"         projects/test-suite
}

build() {
  cd "${srcdir}"

  # [[ -d build-${CARCH} ]] && rm -rf build-${CARCH}
  # mkdir build-${CARCH} && 
  cd build-${CARCH}

  local -a extra_config

  if check_option "debug" "y"; then
    extra_config+=(-DCMAKE_BUILD_TYPE=Debug)
    VERBOSE="VERBOSE=1"
  else
    extra_config+=(-DCMAKE_BUILD_TYPE=Release)
  fi

  # Include location of libffi headers in CPPFLAGS
  FFI_INCLUDE_DIR="$(pkg-config --cflags libffi)"
  FFI_INCLUDE_DIR=$(echo $FFI_INCLUDE_DIR | sed 's|-I||g')

  if [ "${_compiler}" == "gcc" ]; then
    export CC='gcc'
    export CXX='g++'
  elif [ "${_compiler}" == "clang" ]; then
    #export CC='clang -stdlib=libc++'
    #export CXX='clang++ -stdlib=libc++'
    export CC='clang'
    export CXX='clang++'
  else
    msg "undefined compiler"
    exit 1
  fi

  # "Ninja" cant install each component seperately
  # https://github.com/martine/ninja/issues/932

   MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  ${MINGW_PREFIX}/bin/cmake.exe \
    -G"MSYS Makefiles" \
    -DCMAKE_SYSTEM_IGNORE_PATH=/usr/lib \
    -DCMAKE_MAKE_PROGRAM="/usr/bin/make.exe" \
    -DFFI_INCLUDE_DIR="${FFI_INCLUDE_DIR}" \
    -DCMAKE_C_FLAGS="${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${CXXFLAGS} ${CPPFLAGS}" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DLLVM_TARGETS_TO_BUILD="ARM;X86" \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_THREADS=1 \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python2.exe \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=OFF \
    -DCMAKE_CXX_FLAGS="-D_GNU_SOURCE" \
    -DLIBCLANG_BUILD_STATIC=ON \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBUNWIND_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
    "${extra_config[@]}" \
    ../llvm

  make ${VERBOSE}

  # Disable automatic installation of components that go into subpackages
  # -i.orig to check what has been removed in-case it starts dropping more than it should
  #
  sed -i.orig '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  sed -i.orig '/\(extra\|scan-build\|scan-view\)\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
  sed -i.orig '/\(compiler-rt\|libcxxabi\|libcxx\|libunwind\)\/cmake_install.cmake/d' projects/cmake_install.cmake
}

#check() {
#  cd "${srcdir}"/build-${CARCH}
#  # Remove || true once testcase doesn't cause failures.
#  make check || true
#}

package_llvm-svn() {
  pkgdesc="Low Level Virtual Machine (svn) (mingw-w64)"
  #depends=("${MINGW_PACKAGE_PREFIX}-gcc-libs") # "compiler-rt"
  provides=("${MINGW_PACKAGE_PREFIX}-llvm")
  conflicts=("${MINGW_PACKAGE_PREFIX}-llvm")
  # install=llvm-${CARCH}.install

  pkgver=$(pkgver_internal "${srcdir}"/llvm)

  cd "${srcdir}"/llvm

  make -C ../build-${CARCH} DESTDIR="${pkgdir}" install

  # TODO: why CMake haven't included it?
  cp ../build-${CARCH}/lib/libLLVM.dll.a "${pkgdir}/${MINGW_PREFIX}/lib/"

  install -Dm644 LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/llvm/LICENSE"

  # Install CMake stuff
  install -d "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/{modules,platforms}
  install -Dm644 "${srcdir}"/llvm/cmake/modules/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/modules/
  install -Dm644 "${srcdir}"/llvm/cmake/platforms/*.cmake "${pkgdir}"${MINGW_PREFIX}/share/llvm/cmake/platforms/

  # FileCheck is needed to build rust.
  install -Dm755 "${srcdir}"/build-${CARCH}/bin/FileCheck.exe "${pkgdir}${MINGW_PREFIX}/bin/FileCheck.exe"
}

package_compiler-rt-svn() {
  pkgdesc="Runtime libraries for Clang and LLVM (svn) (mingw-w64)"
  url="http://compiler-rt.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-compiler-rt")

  conflicts=("${MINGW_PACKAGE_PREFIX}-compiler-rt")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/compiler-rt)

  cd "${srcdir}/llvm"
  make -C ../build-${CARCH}/projects/compiler-rt DESTDIR="${pkgdir}" install
 }

package_libcxxabi-svn() {
  pkgdesc="C++ Standard Library Support (svn) (mingw-w64)"
  url="http://libcxxabi.llvm.org/"
  provides=("${MINGW_PACKAGE_PREFIX}-libc++abi")
  conflicts=("${MINGW_PACKAGE_PREFIX}-libc++abi")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/libcxxabi)

  cd "${srcdir}/llvm"
  make -C ../build-${CARCH}/projects/libcxxabi -j1 DESTDIR="${pkgdir}" install
}

package_libcxx-svn() {
  pkgdesc="C++ Standard Library (svn) (mingw-w64)"
  url="http://libcxx.llvm.org/"
  provides=("${MINGW_PACKAGE_PREFIX}-libc++")
  conflicts=("${MINGW_PACKAGE_PREFIX}-libc++")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/projects/libcxx)

  cd "${srcdir}/llvm"
  make -C ../build-${CARCH}/projects/libcxx -j1 DESTDIR="${pkgdir}" install
}

package_libunwind-svn() {
  pkgdesc='A new implementation of a stack unwinder for C++ exceptions (mingw-w64)'
  url='http://llvm.org'

  cd "${srcdir}/llvm-${pkgver}.src"
  make -C ../build-${CARCH}/projects/libunwind -j1 DESTDIR="${pkgdir}" install
}

package_lldb-svn() {
  pkgdesc="Next generation, high-performance debugger (svn) (mingw-w64)"
  url="http://lldb.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-readline"
           "${MINGW_PACKAGE_PREFIX}-libxml2"
           "${MINGW_PACKAGE_PREFIX}-python2")

  cd "${srcdir}/llvm"

  make -C ../build-${CARCH}/tools/lldb DESTDIR="${pkgdir}" install

  # Compile Python scripts
  python2 -m compileall "${pkgdir}${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"
  python2 -O -m compileall "${pkgdir}${MINGW_PREFIX}/lib/python2.7/site-packages/lldb"

  install -Dm644 tools/lldb/LICENSE.TXT "${pkgdir}${MINGW_PREFIX}/share/licenses/$pkgname/LICENSE"
}

package_lld-svn() {
  pkgdesc="Linker tools for LLVM (svn) (mingw-w64)"
  url="http://lld.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-lld")
  conflicts=("${MINGW_PACKAGE_PREFIX}-lld")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/lld)

  cd "${srcdir}/llvm"
  make -C ../build-${CARCH}/tools/lld -j1 DESTDIR="${pkgdir}" install
}

package_clang-svn() {
  pkgdesc="C language family frontend for LLVM (svn) (mingw-w64)"
  url="http://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-llvm-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-clang")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang)

  cd "${srcdir}/llvm"
  make -C ../build-${CARCH}/tools/clang DESTDIR="${pkgdir}" install
}

package_clang-analyzer-svn() {
  pkgdesc="A source code analysis framework (svn) (mingw-w64)"
  url="http://clang-analyzer.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang-svn"
           "${MINGW_PACKAGE_PREFIX}-python2")
  provides=("${MINGW_PACKAGE_PREFIX}-clang-analyzer")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang-analyzer")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang)

  cd "${srcdir}"/llvm
  make -C ../build-${CARCH}/tools/clang/tools/scan-build -j1 DESTDIR="${pkgdir}" install
  make -C ../build-${CARCH}/tools/clang/tools/scan-view -j1 DESTDIR="${pkgdir}" install

  # Use Python 2
  sed -i \
    -e 's|env python$|&2|' \
    -e 's|/usr/bin/python$|&2|' \
    "${pkgdir}"${MINGW_PREFIX}/bin/scan-view

  # Compile Python scripts
  python2 -m compileall "${pkgdir}"${MINGW_PREFIX}/bin/clang-analyzer
  python2 -O -m compileall "${pkgdir}"${MINGW_PREFIX}/lib/clang-analyzer
  install -Dm644 LICENSE.TXT "${pkgdir}"${MINGW_PREFIX}/share/licenses/clang-analyzer/LICENSE
}

package_clang-tools-extra-svn() {
  pkgdesc="Extra tools built using Clang's tooling APIs (svn) (mingw-w64)"
  url="http://clang.llvm.org/"
  depends=("${MINGW_PACKAGE_PREFIX}-clang-svn")
  provides=("${MINGW_PACKAGE_PREFIX}-clang-tools-extra")
  conflicts=("${MINGW_PACKAGE_PREFIX}-clang-tools-extra")
  pkgver=$(pkgver_internal "${srcdir}"/llvm/tools/clang/tools/extra)

  cd "${srcdir}"/llvm
  make -C ../build-${CARCH}/tools/clang/tools/extra -j1 DESTDIR="${pkgdir}" install
}

# Wrappers
package_mingw-w64-i686-clang-svn(){
  package_clang-svn
}

package_mingw-w64-i686-clang-analyzer-svn(){
  package_clang-analyzer-svn
}

package_mingw-w64-i686-clang-tools-extra-svn(){
  package_clang-tools-extra-svn
}

package_mingw-w64-i686-compiler-rt-svn(){
  package_compiler-rt-svn
}

package_mingw-w64-i686-libc++abi-svn(){
  package_libcxxabi-svn
}

package_mingw-w64-i686-libc++-svn(){
  package_libcxx-svn
}

package_mingw-w64-i686-libunwind-svn(){
  package_libunwind-svn
}

package_mingw-w64-i686-lld-svn(){
  package_lld-svn
}

package_mingw-w64-i686-lldb-svn(){
  package_lldb-svn
}

package_mingw-w64-i686-llvm-svn(){
  package_llvm-svn
}

package_mingw-w64-x86_64-clang-svn(){
  package_clang-svn
}

package_mingw-w64-x86_64-clang-analyzer-svn(){
  package_clang-analyzer-svn
}

package_mingw-w64-x86_64-clang-tools-extra-svn(){
  package_clang-tools-extra-svn
}

package_mingw-w64-x86_64-compiler-rt-svn(){
  package_compiler-rt-svn
}

package_mingw-w64-x86_64-libc++abi-svn(){
  package_libcxxabi-svn
}

package_mingw-w64-x86_64-libc++-svn(){
  package_libcxx-svn
}

package_mingw-w64-x86_64-libunwind-svn(){
  package_libunwind-svn
}

package_mingw-w64-x86_64-lld-svn(){
  package_lld-svn
}

package_mingw-w64-x86_64-lldb-svn(){
  package_lldb-svn
}

package_mingw-w64-x86_64-llvm-svn(){
  package_llvm-svn
}

# vim:set ts=2 sw=2 et:
