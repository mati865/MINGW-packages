From: Ray Donnelly <mingw.android@gmail.com>
Date: Sat, 27 Sep 2014 15:38:23 +0100
Subject: [PATCH 09/14] MSYS2: Add getMSYS2Root()

Because MSYS2 can be installed anywhere, the real location
is determined using a relative path from octopi.exe
---
diff -urN octopi-0.8.1.orig/src/unixcommand.cpp octopi-0.8.1/src/unixcommand.cpp
--- octopi-0.8.1.orig/src/unixcommand.cpp	2016-04-02 21:10:56.277724700 +0200
+++ octopi-0.8.1/src/unixcommand.cpp	2016-04-02 21:12:08.231857400 +0200
@@ -37,6 +37,7 @@
 
 QFile *UnixCommand::m_temporaryFile = 0;
 QProcessEnvironment *UnixCommand::m_env = 0;
+QString UnixCommand::m_msys2Root;
 
 /*
  * Executes given command and returns the StandardError Output.
diff -urN octopi-0.8.1.orig/src/unixcommand.h octopi-0.8.1/src/unixcommand.h
--- octopi-0.8.1.orig/src/unixcommand.h	2016-04-02 21:18:35.233542500 +0200
+++ octopi-0.8.1/src/unixcommand.h	2016-04-02 21:22:53.805221700 +0200
@@ -24,6 +24,7 @@
 #include <QObject>
 #include <QProcess>
 #include <QTime>
+#include <QCoreApplication>
 #include <unistd.h>
 
 #include "package.h"
@@ -45,6 +46,7 @@
   QProcess *m_process;
   static QFile *m_temporaryFile;
   static QProcessEnvironment *m_env;
+  static QString m_msys2Root;
 
 public:
   UnixCommand(QObject *parent);
@@ -116,6 +118,14 @@
     return (uid == 0); //Returns TRUE if root is running Octopi
   }
 
+  static QString getMSYS2Root(){
+    if (m_msys2Root.isEmpty())
+    {
+       m_msys2Root = QDir::cleanPath(QCoreApplication::applicationDirPath() + QLatin1String("/../.."));
+    }
+    return m_msys2Root;
+  }
+
   static QProcessEnvironment const& getEnv(){
     if (!m_env)
     {
@@ -126,6 +136,15 @@
       m_env->insert("LANG", "C");
       m_env->insert("LC_MESSAGES", "C");
       m_env->insert("LC_ALL", "C");
+      if (UnixCommand::getLinuxDistro() == ectn_MSYS2)
+      {
+          getMSYS2Root();
+          QString path = m_env->value(QLatin1String("PATH"));
+          QString msys2_usr_bin = QDir::cleanPath(m_msys2Root + "\\usr\\bin");
+          path.prepend(msys2_usr_bin+QLatin1Char(';'));
+          _wputenv_s(L"PATH", path.toStdWString().c_str());
+          m_env->insert("PATH", path);
+      }
     }
     return *m_env;
   }
